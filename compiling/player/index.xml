<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiling EasyRPG Player on EasyRPG Wiki</title><link>/wiki/compiling/player/</link><description>Recent content in Compiling EasyRPG Player on EasyRPG Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/wiki/compiling/player/index.xml" rel="self" type="application/rss+xml"/><item><title>android</title><link>/wiki/compiling/player/android/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/android/</guid><description>Building/working on the Android Port Note : We recommend you to put the &amp;ldquo;android-toolchain&amp;rdquo; and &amp;ldquo;player&amp;rdquo; directories in the same directory.
1) Build the android port a) Install the Android SDK Download and follow the official instructions to install the Android SDK : http://developer.android.com/sdk/installing/index.html?pkg=tools
In the SDK directory, execute the &amp;ldquo;android&amp;rdquo; file, it displays a GUI. Use it to download the API 12 (or later). If you want to launch the application on a Virtual Machine, download the ARM EABI System Image.</description></item><item><title>Building Player on OS X with Autotools</title><link>/wiki/compiling/player/osx/autotools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/osx/autotools/</guid><description>Build and install liblcf:
../../liblcf/osx/autotools Install requirements with Homebrew:
brew install libpng libvorbis sdl2 sdl2_mixer pixman freetype Download Player sources from git:
git clone https://github.com/EasyRPG/Player Enter to the Player folder:
cd Player Set up pkgconfig to see expat and icu4c configurations:
export PKG_CONFIG_PATH=&amp;quot;/usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig:$PKG_CONFIG_PATH&amp;quot; Generate configure script:
autoreconf -i Generate Makefile:
./configure Build:
make -j4 Install:
sudo make install</description></item><item><title>Building Player with CMake</title><link>/wiki/compiling/player/cmake/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/cmake/</guid><description>Requirements cmake-2.8 or greater SDL2 SDL2_mixer Freetype Pixman libpng zlib boost (only for 0.4.1, later versions don&amp;rsquo;t require boost) OpenAL FluidSynth Ruby Doxygen (optional) liblcf Build Run &amp;ldquo;cmake ${PATH TO player} &amp;amp;&amp;amp; make&amp;rdquo;. If you want to build it with debug mode pass &amp;ldquo;-D CMAKE_BUILD_TYPE=Debug&amp;rdquo; to cmake.</description></item><item><title>Building Player with GNU Build System</title><link>/wiki/compiling/player/autotools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/autotools/</guid><description>Requirements g++ or clang make pkg-config liblcf libpng FreeType HarfBuzz Pixman SDL2 (or SDL 1.2, discouraged) SDL2_mixer (or SDL_Mixer 1.2, discouraged) libmpg123 libvorbis opusfile libsndfile libxmp SpeexDSP WildMIDI zlib Requirements for building from git autoconf &amp;gt;= 2.69 automake &amp;gt;= 1.11.4 git Run autoreconf -i to generate the configure script.
Build Run: ./configure make sudo make install RTP support with WINE For most games, you will need to have installed the RTP.</description></item><item><title>Compiling Player for GCW Zero</title><link>/wiki/compiling/player/gcw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/gcw0/</guid><description>You need to setup the gcw0 buildroot first: Download a precompiled toolchain from http://www.gcw-zero.com/develop.
You need to cross-compile pixman.
Download Player and liblcf from GitHub:
git clone --depth=1 https://github.com/EasyRPG/Player.git cd Player/libs git clone --depth=1 https://github.com/EasyRPG/liblcf.git cd .. Change into the builds/opendingux folder and start the build:
cd builds/opendingux make If no error occured, there will be an EasyRPG executable in the gcw-zero subdirectory. To build an opk ready to deploy to the device:</description></item><item><title>Compiling Player for Nintendo Wii</title><link>/wiki/compiling/player/wii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/wii/</guid><description>For compiling EasyRPG Player for your Wii you will need devkitpro.
And you will need the following libraries:
SDL (&amp;gt;=1.2.10). SDL_mixer (&amp;gt;=1.2.6) with support for WAV, MIDI, OGG and MP3. Precompiled SDL-libs can be found on the website from SDL Wii.
libpng (&amp;gt;=1.2.8). zlib (&amp;gt;=1.2.2). freetype (&amp;gt;=2.4.3). They can be found in the devkitpro portlibs.
iconv pixman expat Recent versions can be found here: https://github.</description></item><item><title>Compiling Player for PlayStation Portable</title><link>/wiki/compiling/player/psp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/psp/</guid><description>Toolchain Requirement For compiling EasyRPG Player for your PSP (PlayStation Portable) you will need the PSP SDK compiled with:
GCC 4.3.2 or later Newlib 1.18 or later with support for libiconv. Library Requirement You will need the following libraries:
SDL (&amp;gt;=1.2.10). SDL_image (&amp;gt;=1.2.4) with support for BMP, PNG and JPG. SDL_mixer (&amp;gt;=1.2.6) with support for WAV, MIDI, OGG and MP3. SDL_gfx (&amp;gt;=2.0.13). SDL_ttf (&amp;gt;=2.0.7). Independent JPEG (&amp;gt;=6b 27-Mar-1998).</description></item><item><title>Macros</title><link>/wiki/compiling/player/macros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/compiling/player/macros/</guid><description> Name Description USE_SDL Use SDL as a rendering backend USE_SDL_MIXER Use SDL_mixer for audio backend HAVE_WINE Use WINE registry parser with UTF-16 support using with Boost::Spirit (requires boost development libraries, not only headers), otherwise will fallback to INIReader parser</description></item></channel></rss>